
# 1. Выглядит как обычная функция, но вместо return используется ключевое слово yield.
# 2. __iter__ и next() создаются для генератора автоматически.
# 3. При каждом вызове next() генератор продолжает выполняться с момента остановки (первый раз - начало функции, остальные - последний yield).
# 4. Промежуточное состояние сохраняется автоматически между вызовами.
# 5. После окончания выполнения (внутри функции дошли до конца) автоматически выбрасывается StopIteration.

#

def counter():
    val = 1
    for ind in xrange(10):
        yield val
        val = val + 1

print(type(counter), type(counter()))
# -> <type 'function'> <type 'generator'>
print([val for val in gen])
# -> [1, 2, 3, 4, 5, 6, 7, 8, 9, 10]

#----
#### Генераторные выражения
# Записываются полностью как list comprehensions, только вместо квадратных скобок - круглые.
# Генераторное выражение возвращает генератор.
# Используется более короткая, но и более ограниченная форма записи.
gen = (val for val in [1, 2, 3])
>>> print(gen)
	  
<generator object <genexpr> at 0x000001D7480EF5E8>

>>> print([val for val in gen])
[1, 2, 3]

>>> print([val for val in gen])
[]
--

#--------------Generator Expressions
>>> my_list = ['a', 'b', 'c', 'd']
>>> gen_obj = (x for x in my_list)
>>> for val in gen_obj:
	print(val)
#----------
a
b
c
d
